<?php
/**
 * @file
 * Code for the Audio Snippet feature.
 */

include_once 'audio_snippet.features.inc';

define('AUDIO_SNIPPET_DEFAULT_TITLE', '<Untitled audio snippet>');
define('AUDIO_SNIPPET_DEFAULT_ARTIST', '<Unknown artist>');

/**
 * Implements hook_men().
 */
function audio_snippet_menu() {
  $items = array();

  $items['audio_snippet/create'] = array(
    'title' => 'Create audio snippet',
    'access arguments' => array('create audio_snippet content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('audio_snippet_create_form'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_load().
 */
function audio_snippet_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if ($node->type == 'audio_snippet') {
      // Fetch the audio snippet metadata from the file entity and stick it here for reference later.
      $wrapper = entity_metadata_wrapper('node', $node);
      $file = $wrapper->field_audio_snippet->value();
      if ($file) {
        $file = entity_load('file', array($file[0]['fid']));
        $wrapper = entity_metadata_wrapper('file', reset($file)->fid);
        $node->title_tid = $wrapper->field_audio_title->value()->tid;
        $node->album_tid = $wrapper->field_audio_album->value()->tid;
        $node->artist_tid = $wrapper->field_audio_artist->value()->tid;
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function audio_snippet_block_info() {
  $blocks = array();

  
  $blocks['recent_by_artist'] = array(
    'info' => t('Recent snippets by this artist'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['recent_by_title'] = array(
    'info' => t('Recent snippets from this song'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['recent_by_album'] = array(
    'info' => t('Recent snippets from this album'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function audio_snippet_block_view($delta = '') {
  $output = array(
    'subject' => 'Unknown delta',
    'content' => array('#markup' => '<p>' . t('Unknown delta') . '</p>'),
  );

  switch ($delta) {
    case 'recent_by_artist':
      if ($node = menu_get_object()) {
        if ($node->type != 'audio_snippet') {
          drupal_set_message($delta . ' block not used on an audio-snippet page.', 'error'); 
        }

        $output['subject'] = t('More from this artist');
        $output['content'] = views_embed_view('related_snippets', 'related_by_artist', $node->nid, $node->artist_tid);
      }
      else {
        drupal_set_message($delta . ' block not used on an audio-snippet page.', 'error');
      }
      break;

    case 'recent_by_title':
      if ($node = menu_get_object()) {
        if ($node->type != 'audio_snippet') {
          drupal_set_message($delta . ' block not used on an audio-snippet page.', 'error'); 
        }

        $output['subject'] = t('More from this song');
        $output['content'] = views_embed_view('related_snippets', 'related_by_title', $node->nid, $node->artist_tid, $node->title_tid);
      }
      else {
        drupal_set_message($delta . ' block not used on an audio-snippet page.', 'error');
      }
      break;

    case 'recent_by_album':
      if ($node = menu_get_object()) {
        if ($node->type != 'audio_snippet') {
          drupal_set_message($delta . ' block not used on an audio-snippet page.', 'error'); 
        }

        $output['subject'] = t('More from this album');
        $output['content'] = views_embed_view('related_snippets', 'related_by_album', $node->nid, $node->artist_tid, $node->album_tid);
      }
      else {
        drupal_set_message($delta . ' block not used on an audio-snippet page.', 'error');
      }
      break;
    default:
      break;
  }

  return $output;
}

/**
 * Implements hook_node_view().
 */
function audio_snippet_node_view($node, $view_mode, $langcode) {
  global $user;

  if ($node->type == "audio_snippet"   && $view_mode == "full") {
    // Prevent browser from caching the page.
    drupal_add_http_header('Cache-Control', 'no-cache, must-revalidate, no-store');
    drupal_add_http_header('Expires', '-1');
    
    // Prevent access to audio-snippet nodes via the raw node/nid URL
    if (!in_array('administrator', $user->roles) && current_path() == request_path()) {
      drupal_not_found();
      drupal_exit();
    }
  }
}

/**
 * Creation form for the audio-snippet.
 */
function audio_snippet_create_form($form, &$form_state, $node = null) {
  $form = array();

  $has_uploaded_file = !empty($form_state['values']['audio_file']);

  $form['audio_snippet_container'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="audio-snippet-container">',
    '#suffix' => '</div>',
  );

  $form['audio_snippet_container']['audio_file'] = array(
    '#type' => 'managed_file',
    '#title' => 'Audio file',
    '#upload_validators' => array("file_validate_extensions" => array("mp3")),
    '#upload_location' => 'public://audio_snippets/', 
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Submit handler for the audio-snippet creation form
 */
function audio_snippet_create_form_submit($form, &$form_state) {
  global $user;
  $form_values = $form_state['values'];
  
  // Create the node
  $values = array(
    'type' => 'audio_snippet',
    'uid' => $user->uid,
    'status' => 1,  // Published.
    'comment' => 2, // Comments enabled.
    'promote' => 0, // Not promoted to frontpage
  );
  $entity = entity_create('node', $values);
  $ewrapper = entity_metadata_wrapper('node', $entity);

  // Set the title
  $ewrapper->title->set(AUDIO_SNIPPET_DEFAULT_TITLE);

  // Set the body
  $body_content = '';
  $ewrapper->body->set(array('value' => $body_content));
  $ewrapper->body->summary->set($body_content);

  // Rename the file to remove any troublesome characters
  $fid = $form_values['audio_file'];
  $file = file_load($fid);
  $clean_uri = str_replace(array("'", "!"), "_", $file->uri);
  file_move($file, $clean_uri);

  // Generate alternate formats for the file
  $fids = audio_snippet_generate_alternate_formats($form_values['audio_file']);
  $fids[] = $form_values['audio_file']; // Include the original file fid.

  // Set the file ID
  $field_langcode = field_language('node', $entity, 'field_audio_snippet');
  foreach ($fids as $fid) {
    $entity->field_audio_snippet[$field_langcode][] = array(
      'fid' => $fid,
      'display' => 1,
      'description' => '',
    );
  }

  // Update the node
  $ewrapper->save(TRUE);
  entity_save('node', $entity);

  // Redirect to the node view page
  $form_state['redirect'] = drupal_get_path_alias('node/' . $entity->nid);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function audio_snippet_form_audio_snippet_node_form_alter(&$form, &$form_state) {
  // Hide the title.
  $form['title']['#type'] = 'value';

  // If there isn't a title set yet (e.g. we're adding a new node),
  // set it to the default.
  if (empty($form['title']['#value'])) {
    $form['title']['#value'] = AUDIO_SNIPPET_DEFAULT_TITLE;
  }
}

/**
 * Implements hook_node_presave().
 */
function audio_snippet_node_presave($node) {
  if ($node->type != 'audio_snippet') {
    return;
  }

  // Process the audio files to extract their metadata. Only the last file's metadata will be used.
  $audio_fields = field_get_items('node', $node, 'field_audio_snippet');
  foreach ($audio_fields as $audio_field) {
    $file = file_load($audio_field['fid']);
    if (!empty($file)) {
      // Set the node title.
      $node->title = audio_snippet_build_node_title_from_file($file);
    }
  }
}

/**
 * Implements hook_file_presave().
 */
function audio_snippet_file_presave($file_entity) {
  if (!empty($file_entity->type) && $file_entity->type == 'audio' && $file_entity->uri && getid3_load()) {
    $file_wrapper = entity_metadata_wrapper('file', $file_entity);

    // Get the metadata
    $filepath = drupal_realpath($file_entity->uri);
    $metadata = getid3_analyze($filepath);

    // Process ID3 tags
    if (!empty($metadata['tags_html']['id3v2']) || 
        !empty($metadata['tags_html']['id3v1'])) {
      $tags = !empty($metadata['tags_html']['id3v2']) ? $metadata['tags_html']['id3v2'] : $metadata['tags_html']['id3v1'];

      // Save the title.
      if (isset($tags['title'])) {
        $tid = _audio_snippet_get_taxonomy_term_id(reset($tags['title']), 'titles');
        if (FALSE !== $tid) {
          $file_wrapper->field_audio_title->set($tid);
        }
      }
      if (isset($tags['artist'])) {
        $tid = _audio_snippet_get_taxonomy_term_id(reset($tags['artist']), 'artists');
        if (FALSE !== $tid) {
          $file_wrapper->field_audio_artist->set($tid);
        }
      }
      if (isset($tags['album'])) {
        $tid = _audio_snippet_get_taxonomy_term_id(reset($tags['album']), 'albums');
        if (FALSE !== $tid) {
          $file_wrapper->field_audio_album->set($tid);
        }
      }
    }
  }
}

/**
 * Gets a taxonomy term ID from the database.  If a term with the given name doesn't exist, it's created.
 * 
 * @param $term_name
 *  The term name.
 * @param $vocabulary
 *  The vocabulary name.
 *
 * @return The term ID of the term, or FALSE if no vocabulary was found.
 */
function _audio_snippet_get_taxonomy_term_id($term_name, $vocabulary) {
  $term_name = trim($term_name);
  if (empty($term_name) || !is_string($term_name)) {
    return FALSE;
  }

  // Get the vocabulary ID.
  $vid = db_select('taxonomy_vocabulary', 't')
    ->fields('t', array('vid'))
    ->condition('machine_name', $vocabulary)
    ->execute()
    ->fetchField();
  if (FALSE === $vid) {
    return FALSE;
  }

  // Look for the taxonomy term.
  $tid = db_select('taxonomy_term_data', 't')
    ->fields('t')
    ->condition('vid', $vid)
    ->condition('name', $term_name, 'LIKE')  // LIKE is used for case-insensitivity
    ->execute()
    ->fetchField();

  // If there's no term in the DB already, insert a new one.
  if (FALSE === $tid) {
    $term = new StdClass();
    $term->name = $term_name;
    $term->vid = $vid;
    if (FALSE === taxonomy_term_save($term)) {
      return FALSE;
    }
    $tid = $term->tid;
  }

  return $tid;
}

/**
 * Builds the title of a node from an audio file's metadata.
 *
 * @param $file
 *  The file entity.
 *
 * @return A string containing the suggested title of a node, or FALSE if none is recognized.
 */
function audio_snippet_build_node_title_from_file($file) {
  $node_title = AUDIO_SNIPPET_DEFAULT_TITLE; // The title.

  if ($file) {
    $file_wrapper = entity_metadata_wrapper('file', $file);
    $title = $file_wrapper->field_audio_title->value()->name; // Get the existing title.
    $artist = $file_wrapper->field_audio_artist->value()->name; // Get the existing artist.
    $node_title = $artist . ' - ' . $title;
  }

  return $node_title;
}

/**
 * Generates audio files that are alternate formats.
 *
 * Used to make the necessary formats required for
 * cross-browser. HTML5 compliancy.
 *
 * @param $fid
 *  File ID of the master file
 * 
 * @return An array of the created file IDs if the necessary formats were generated. Empty if no files were generated.
 */
function audio_snippet_generate_alternate_formats($fid) {
  $file_ids = array();
  $file = file_load($fid);
  
  if (!empty($file->uri)) {
    switch ($file->filemime) {
      case 'audio/mpeg':
        $ogg_suffix = '.alternate.ogg';
        
        // Clone the existing file.
        $new_file = file_copy($file, $file->uri . $ogg_suffix, FILE_EXISTS_REPLACE);

        // Convert the new file to OGG.
        if ($new_file) {
          $original_filename = drupal_realpath($file->uri);          
          $destination = drupal_realpath($new_file->uri);

          $sox_path = '/opt/local/bin/';
          $command = $sox_path . "sox '" . $original_filename . "' '" . $destination . "'";
          exec($command);

          // @TODO Check for Sox error

          // Resave the file
          $ogg_file = file_get_contents($destination);
          if (FALSE === $ogg_file) {
            drupal_set_message(t("Failed reopening OGG file at !file.", array('!file' => $destination)), 'error');
            break;
          }
          $saved_ogg_file = file_save_data($ogg_file, $new_file->uri, FILE_EXISTS_REPLACE);
          if (FALSE === $saved_ogg_file) {
            drupal_set_message(t("Failed resaving OGG file."), 'error');
            break;
          }
          $file_ids[] = $saved_ogg_file->fid;
        }

        break;
      default:
        break;
    }
  }
  return $file_ids;
}